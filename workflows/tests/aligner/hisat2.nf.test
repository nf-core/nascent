nextflow_pipeline {

    name "HISAT2"
    script "../../../main.nf"

    test("Should run with defaults") {

        tag "HISAT2"

        when {
            params {
                outdir = "$outputDir"
                aligner = "hisat2"
                hisat2_index = 'https://raw.githubusercontent.com/nf-core/test-datasets/nascent/reference/GRCh38_chr21_hisat2.tar.gz'
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml")).match("software_versions") },
                { assert snapshot(
                    workflow.trace.tasks().size(),
                    UTILS.getAllFilesFromDir("$outputDir/preprocessing/fastp/", ".json"),
                    bam("$outputDir/hisat2/cd4_REP1.sorted.bam").getSamLinesMD5(),
                    bam("$outputDir/hisat2/cd4_REP2.sorted.bam").getSamLinesMD5(),
                    bam("$outputDir/hisat2/jurkat.sorted.bam").getSamLinesMD5(),
                    path("$outputDir/hisat2/log").list(),
                    path("$outputDir/hisat2/samtools_stats").list(),
                    path("$outputDir/quality_control/bbsplit").list(),
                    UTILS.getAllFilesFromDir("$outputDir/quality_control/preseq", ".txt"),
                    path("$outputDir/quality_control/rseqc/read_duplication/xls").list(),
                    path("$outputDir/quality_control/rseqc/read_duplication/rscript").list(),
                    path("$outputDir/quality_control/rseqc/infer_experiment").list(),
                    path("$outputDir/quality_control/rseqc/read_distribution").list(),
                    path("$outputDir/coverage_graphs/").list(),
                    path("$outputDir/transcript_identification/homer/cd4.bed"),
                    path("$outputDir/transcript_identification/homer/jurkat.bed"),
                    path("$outputDir/transcript_identification/intersect/").list(),
                    path("$outputDir/transcript_identification/filtered/").list(),
                    path("$outputDir/multiqc/multiqc_report.html").exists(),
                ).match("output_files")
                }
            )
        }
    }
}
