nextflow_pipeline {

    name "BWA"
    script "../../../main.nf"
    tag "aligner"
    tag "bwa"

    test("Should run with defaults") {

        when {
            params {
                outdir = "$outputDir"
                aligner = "bwa"
                input = "${projectDir}/assets/samplesheet.csv"
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}', 'multiqc/multiqc_plots', 'multiqc/multiqc_plots/**'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            // bam_files: All bam files
            def bam_files = getAllFilesFromDir(params.outdir, include: ['**/*.bam'])
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    // Number of tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml"),
                    // All stable path name
                    stable_name,
                    // All files with stable contents
                    stable_path,
                    // All bam files
                    // FIXME bam_files.collect{ file -> [ file.getName(), bam(file.toString()).getHeaderMD5() ] }
                ).match() }
            )
        }
    }

    def igenomes_base = 's3://ngi-igenomes/igenomes'

    // https://github.com/nf-core/nascent/issues/106
    test("Should work with BWA Index") {
        // FIXME PINTS Fails because it doesn't find anything.
        config '../skip_pints.config'
        when {
            params {
                outdir = "$outputDir"
                aligner = "bwa"
                // TODO Update these to human
                bwa_index = "${igenomes_base}/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Sequence/BWAIndex/version0.6.0/"
                fasta = "${igenomes_base}/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Sequence/WholeGenomeFasta/genome.fa"
                gtf = "${igenomes_base}/Saccharomyces_cerevisiae/Ensembl/R64-1-1/Annotation/Genes/genes.gtf"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.trace.tasks().size(),
                ).match()
                }
            )
        }
    }

    // https://github.com/nf-core/nascent/issues/119
    test("Should work with gzipped references") {
        config '../skip_gzip.config'
        when {
            params {
                outdir = "$outputDir"
                aligner = "bwa"
                fasta = 'https://raw.githubusercontent.com/nf-core/test-datasets/rnaseq/reference/genome.fasta.gz'
                gtf = 'https://raw.githubusercontent.com/nf-core/test-datasets/rnaseq/reference/genes.gtf.gz'
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.trace.tasks().size(),
                ).match()
                }
            )
        }
    }
}
