nextflow_pipeline {

    name "STAR"
    script "../../../main.nf"
    tag "aligner"
    tag "star"

    test("Should run with defaults") {

        when {
            params {
                outdir = "$outputDir"
                aligner = "star"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml")).match("software_versions") },
                { assert snapshot(
                    workflow.trace.tasks().size(),
                    path("$outputDir/bbmap").list(),
                    // BUG https://github.com/nf-core/nascent/issues/102
                    // path("$outputDir/bedtools").list(),
                    // FIXME gtf2bed isn't deterministic
                    // path("$outputDir/bwa/featurecounts/gene").list(),
                    // FIXME cd4 isn't deterministic
                    // path("$outputDir/bwa/featurecounts/predicted").list(),
                    // path("$outputDir/deeptools").list(),
                    // path("$outputDir/fastp/*.json").list(),
                    // FIXME gtf2bed isn't deterministic
                    // path("$outputDir/gtf2bed").list(),
                    path("$outputDir/homer/cd4.bed"),
                    path("$outputDir/homer/jurkat.bed"),
                    // FIXME https://github.com/nf-core/nascent/issues/148
                    // path("$outputDir/preseq").list(),
                    // path("$outputDir/rseqc").list(),
                    bam("$outputDir/samtools/cd4_REP1.sorted.bam").getSamLinesMD5(),
                    bam("$outputDir/samtools/cd4_REP2.sorted.bam").getSamLinesMD5(),
                    bam("$outputDir/samtools/jurkat.sorted.bam").getSamLinesMD5(),
                ).match("output_files")
                }
            )
        }
    }

    test("Should run with gzipped gtf") {

        when {
            params {
                outdir = "$outputDir"
                aligner = "star"
                gtf = "https://raw.githubusercontent.com/nf-core/test-datasets/nascent/reference/genes_chr21.gtf.gz"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.trace.tasks().size(),
                    path("$outputDir/bbmap").list(),
                    // BUG https://github.com/nf-core/nascent/issues/102
                    // path("$outputDir/bedtools").list(),
                    // FIXME gtf2bed isn't deterministic
                    // path("$outputDir/bwa/featurecounts/gene").list(),
                    // FIXME cd4 isn't deterministic
                    // path("$outputDir/bwa/featurecounts/predicted").list(),
                    // path("$outputDir/deeptools").list(),
                    // path("$outputDir/fastp/*.json").list(),
                    // FIXME gtf2bed isn't deterministic
                    // path("$outputDir/gtf2bed").list(),
                    path("$outputDir/homer/cd4.bed"),
                    path("$outputDir/homer/jurkat.bed"),
                    // FIXME https://github.com/nf-core/nascent/issues/148
                    // path("$outputDir/preseq").list(),
                    // path("$outputDir/rseqc").list(),
                    bam("$outputDir/samtools/cd4_REP1.sorted.bam").getSamLinesMD5(),
                ).match()
                }
            )
        }
    }
}
