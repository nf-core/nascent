nextflow_pipeline {

    name "STAR"
    script "../../../main.nf"
    tag "aligner"
    tag "star"

    test("Should run with defaults") {

        when {
            params {
                outdir = "$outputDir"
                aligner = "star"
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            // bam_files: All bam files
            def bam_files = getAllFilesFromDir(params.outdir, include: ['**/*.bam'])
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    // Number of tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml"),
                    // All stable path name
                    stable_name,
                    // All files with stable contents
                    stable_path,
                    // All bam files
                    // FIXME bam_files.collect{ file -> [ file.getName(), bam(file.toString()).getReadsMD5() ] }
                ).match() }
            )
        }
    }

    test("Should run with gzipped gtf") {

        when {
            params {
                outdir = "$outputDir"
                aligner = "star"
                gtf = "https://raw.githubusercontent.com/nf-core/test-datasets/nascent/reference/genes_chr21.gtf.gz"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(removeNextflowVersion("$outputDir/pipeline_info/nf_core_pipeline_software_mqc_versions.yml")).match("gzip_software_versions") },
                { assert snapshot(
                    workflow.trace.tasks().size(),
                ).match()
                }
            )
        }
    }
}
