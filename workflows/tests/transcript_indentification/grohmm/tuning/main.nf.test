nextflow_pipeline {
    name "groHMM"
    script "../../../../../main.nf"
    tag "groHMM"
    // triggers 'bin/parameter_tuning.R', 'bin/transcriptcalling_grohmm.R'

    test("Should run with defaults") {
        when {
            params {
                outdir = "$outputDir"
                skip_grohmm = false
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}', 'multiqc/multiqc_plots', 'multiqc/multiqc_plots/**'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            // cram_files: All cram files
            def bam_files = getAllFilesFromDir(params.outdir, include: ['**/*.cram'])
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    // Number of tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we tests pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/nf_core_nascent_software_mqc_versions.yml"),
                    // All stable path name
                    stable_name,
                    // All files with stable contents
                    stable_path,
                    // All cram files
                    // FIXME bam_files.collect{ file -> [ file.getName(), bam(file.toString()).getReadsMD5() ] }
                ).match() }
            )
        }
    }
}
