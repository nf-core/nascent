/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    ////////////////////
    // Prepare Genome //
    ////////////////////

    withName: GFFREAD {
        ext.args = "--keep-exon-attrs -F -T"
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*:PREPARE_GENOME:.*' {
        publishDir = [
            enabled: params.save_reference,
            mode: params.publish_dir_mode,
            path: { "${params.outdir}/reference" },
        ]
    }

    ///////////////////
    // Preprocessing //
    ///////////////////

    withName: FASTP {
        ext.prefix = { "${meta.id}.trimmed" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.{html,log,json}"
        ]
    }

    ////////////////
    // Alignement //
    ////////////////

    withName: "BWA_MEM" {
        publishDir = [
            enabled: false
        ]
    }

    withName: "BWAMEM2_MEM" {
        publishDir = [
            enabled: false
        ]
    }

    withName: "BOWTIE2_ALIGN" {
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
        ]
    }

    withName: "DRAGMAP_ALIGN" {
        ext.when         = { params.aligner == "dragmap" }
        ext.args         = { "--RGSM ${meta.read_group}" }
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/log" },
                mode: 'copy',
                pattern: "*.log"
            ],
        ]
    }

    withName: "HISAT2_ALIGN" {
        ext.args   = "--met-stderr --new-summary --dta"
        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }

    withName: "STAR_ALIGN" {
        ext.args   = {
            // Function to convert argument strings into a map
            def argsToMap = { String args ->
                args.split("\\s(?=--)").collectEntries {
                    def parts = it.trim().split(/\s+/, 2)
                    [(parts.first()): parts.last()]
                }
            }

            // Initialize the map with preconfigured values
            def preset_args_map = argsToMap("""
                                            --twopassMode Basic
                                            --outSAMtype BAM Unsorted
                                            --readFilesCommand zcat
                                            --runRNGseed 0
                                            --outFilterMultimapNmax 20
                                            --alignSJDBoverhangMin 1
                                            --outSAMattributes NH HI AS NM MD
                                            --quantTranscriptomeBan Singleend
                                            --outSAMstrandField intronMotif
                                            ${params.save_unaligned ? '--outReadsUnmapped Fastx' : ''}
                                            """.trim())

            // Consolidate the extra arguments
            def final_args_map = preset_args_map + (params.extra_star_align_args ? argsToMap(params.extra_star_align_args) : [:])

            // Convert the map back to a list and then to a single string
            final_args_map.collect { key, value -> "${key} ${value}" }.join(' ').trim()
        }

        publishDir = [
            [
                path: { "${params.outdir}/${params.aligner}/log" },
                mode: params.publish_dir_mode,
                pattern: '*.{out,tab}'
            ],
            // TODO save_align_intermeds?
            // [
            //     path: { params.save_align_intermeds ? "${params.outdir}/${params.aligner}" : params.outdir },
            //     mode: params.publish_dir_mode,
            //     pattern: '*.bam',
            //     saveAs: { params.save_align_intermeds ? it : null }
            // ],
            // TODO save_unaligned?
            // [
            //     path: { params.save_unaligned ? "${params.outdir}/${params.aligner}/unmapped" : params.outdir },
            //     mode: params.publish_dir_mode,
            //     pattern: '*.fastq.gz',
            //     saveAs: { params.save_unaligned ? it : null }
            // ]
        ]
    }

    ///////////////////////////////
    // Alignment post-processing //
    ///////////////////////////////

    withName: '.*:BAM_SORT_STATS_SAMTOOLS:.*' {
        ext.prefix = { "${meta.id}.sorted.bam" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: '.*:BAM_SORT_STATS_SAMTOOLS:SAMTOOLS_.*' {
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/${params.aligner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ".*:FASTQ_ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS_GENOME:.*" {
        ext.prefix = {"${meta.id}_genome"}
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }

    withName: ".*:FASTQ_ALIGN_STAR:BAM_SORT_STATS_SAMTOOLS_TRANSCRIPTOME:.*" {
        ext.prefix = {"${meta.id}_transcriptome"}
        publishDir = [
            path: { "${params.outdir}/${params.aligner}/samtools_stats" },
            mode: params.publish_dir_mode,
            pattern: "*.{stats,flagstat,idxstats}"
        ]
    }


    if(params.with_umi) {
        withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS:UMITOOLS_DEDUP' {
            ext.args = { [
                meta.single_end ? '' : '--unpaired-reads=discard --chimeric-pairs=discard',
            ].join(' ').trim() }
            ext.prefix = { "${meta.id}.umi_dedup.sorted" }
            publishDir = [
                [
                    path: { "${params.outdir}/${params.aligner}/umitools" },
                    mode: params.publish_dir_mode,
                    pattern: '*.tsv'
                ],
                [
                    path: { "${params.outdir}/${params.aligner}/umitools/genomic_dedup_log" },
                    mode: params.publish_dir_mode,
                    pattern: '*.log'
                ]
            ]
        }

        withName: '.*:BAM_DEDUP_STATS_SAMTOOLS_UMITOOLS:BAM_STATS_SAMTOOLS:.*' {
            ext.prefix = { "${meta.id}.umi_dedup.sorted.bam" }
            publishDir = [
                path: { "${params.outdir}/${params.aligner}/samtools_stats" },
                mode: params.publish_dir_mode,
                pattern: '*.{stats,flagstat,idxstats}'
            ]
        }
    }

    /////////////////////
    // Quality Control //
    /////////////////////

    withName: '.*:BAM_RSEQC:RSEQC_READDUPLICATION' {
        publishDir = [
            [
                path: { "${params.outdir}/quality_control/rseqc/read_duplication/pdf" },
                mode: params.publish_dir_mode,
                pattern: '*.pdf'
            ],
            [
                path: { "${params.outdir}/quality_control/rseqc/read_duplication/xls" },
                mode: params.publish_dir_mode,
                pattern: '*.xls'
            ],
            [
                path: { "${params.outdir}/quality_control/rseqc/read_duplication/rscript" },
                mode: params.publish_dir_mode,
                pattern: '*.r'
            ]
        ]
    }

    withName: '.*:BAM_RSEQC:RSEQC_INFEREXPERIMENT' {
        publishDir = [
            path: { "${params.outdir}/quality_control/rseqc/infer_experiment" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*:BAM_RSEQC:RSEQC_READDISTRIBUTION' {
        publishDir = [
            path: { "${params.outdir}/quality_control/rseqc/read_distribution" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PRESEQ_.*' {
        ext.args   = '-verbose -bam -seed 1 -seg_len 100000000'
        publishDir = [
            [
                path: { "${params.outdir}/quality_control/preseq" },
                mode: params.publish_dir_mode,
                pattern: "*.txt"
            ],
            [
                path: { "${params.outdir}/quality_control/preseq/log" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ]
        ]
    }

    withName: 'BBMAP_PILEUP' {
        publishDir = [
            [
                path: { "${params.outdir}/quality_control/bbsplit" },
                mode: params.publish_dir_mode,
                pattern: '*.txt'
            ],
        ]
    }

    /////////////////////
    // Coverage Graphs //
    /////////////////////

    withName: ".*:COVERAGE_GRAPHS:.*" {
        publishDir = [
            [
                path: { "${params.outdir}/coverage_graphs" },
                mode: params.publish_dir_mode,
                pattern: '*.{bedGraph,bigWig}'
            ],
        ]
    }

    withName: DEEPTOOLS_BAMCOVERAGE_PLUS {
        ext.args = "--filterRNAstrand forward"
        ext.prefix = { "${meta.id}.plus" }
    }

    withName: DEEPTOOLS_BAMCOVERAGE_MINUS {
        ext.args = "--filterRNAstrand reverse"
        ext.prefix = { "${meta.id}.minus" }
    }

    withName:DREG_PREP {
        ext.prefix = { "${meta.id}.dreg" }
    }

    ///////////////////////////////
    // Transcript Identification //
    ///////////////////////////////

    withName: "HOMER_.*" {
        publishDir = [
            [
                path: { "${params.outdir}/transcript_identification/homer" },
                mode: params.publish_dir_mode,
            ],
        ]
    }

    withName: HOMER_FINDPEAKS {
        // TODO Handle other assays
        ext.args = "-style groseq"
    }

    withName: HOMER_MAKETAGDIRECTORY {
        ext.args = "-checkGC"
    }

    withName: HOMER_MAKEUCSCFILE {
        ext.args = "-strand separate"
    }

    withName: PINTS_CALLER {
        // FIXME bowtie2 fails for some reason
        ext.when = { params.aligner != "bowtie2" }
        publishDir = [
            [
                path: { "${params.outdir}/transcript_identification/pints" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('.log') ? null : filename }
            ],
        ]
    }

    withName: "GROHMM_PARAMETERTUNING" {
            publishDir = [
                enabled: false
            ]
    }

    withName: "GROHMM_TRANSCRIPTCALLING" {
        publishDir = [
            [
                path: { "${params.outdir}/transcript_identification/grohmm" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
        ]
    }

    withName: BEDTOOLS_SORT {
        ext.prefix = { "${meta.id}_sorted" }
        publishDir = [
            enabled: false
        ]
    }

    withName: BEDTOOLS_MERGE {
        ext.args = "-header"
        ext.prefix = { "${meta.id}_merged" }
        publishDir = [
            [
                path: { "${params.outdir}/transcript_identification/merged" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
        ]
    }

    withName: BEDTOOLS_INTERSECT_FILTER {
        ext.prefix = { "${meta.id}_filtered" }
        ext.args = "-v"
        publishDir = [
            [
                path: { "${params.outdir}/transcript_identification/filtered" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
        ]
    }

    withName: BEDTOOLS_INTERSECT {
        ext.prefix = { "${meta.id}_intersect" }
        ext.args = "-wa"
        publishDir = [
            [
                path: { "${params.outdir}/transcript_identification/intersect" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
        ]
    }

    ////////////////////
    // Quantification //
    ////////////////////

    withName: SUBREAD_FEATURECOUNTS_GENE {
        ext.args = "-B -C"
        publishDir = [
            path: { "${params.outdir}/quantification/gene" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BED2SAF  {
        publishDir = [
            enabled: false
        ]
    }

    withName: SUBREAD_FEATURECOUNTS_PREDICTED {
        ext.prefix = { "${meta.id}-group_${annotation.baseName}-transcripts" }
        ext.args = '-F "SAF"'
        publishDir = [
            path: { "${params.outdir}/quantification/nascent" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
